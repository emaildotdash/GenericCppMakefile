##
## Generic Makefile for large-scale cross-platform C++ projects
## Author: Ádám "emaildotdash" Gutási
## License: MIT
## Commands: <default>/all, run, runall, clean/clear, cleanall/clearall, list/info, fetch
## Github: https://github.com/emaildotdash/GenericCppMakefile
##
##############################################################

## superproject settings

# directories of all projects that you want to compile (relative path)
MAIN_SUBPROJS :=
# directories of all projects that are strictly here as dependencies for the above projects (relative path)
DEP_SUBPROJS :=

# decide what target you want to build for
# choosing one will force all subprojects to use that setting
# leaving it empty will take whatever exists (priority: release > debug) the default setting
# debug / release / <empty>
TARGET :=

# NOTE: passing release or debug after a build call as SPECIFICALLY the second target will build the project with that in mind
# e.g.: make all release, make run debug

# WARNING: make sure there's no extra whitespace following any entry in this file

##############################################################
###################### DO NOT CHANGE #########################

THISDIR := $(shell pwd)# absolute directory of this project
ALL_PROJS := $(MAIN_SUBPROJS) $(DEP_SUBPROJS)# all userspecified projects

FOUND_PROJS := $(shell find ./* -name Makefile | grep -v "\./Makefile")# all Makefile directories found in any subdirectories

DEP_OUTPUTS := $(foreach PRJ,$(DEP_SUBPROJS),$(shell cd $(PRJ) && make -s outdir $(TARGET)) )# output files of all dependency projects
MAIN_LIB_DESTS := $(foreach PRJ,$(MAIN_SUBPROJS),$(shell cd $(PRJ) && make -s libdir))# destinations of copied lib files

# set target optimization depending on 2nd target (only here for compatibility with superprojects; don't use this functionality)
ifeq ($(word 2,$(MAKECMDGOALS)),release)
TARGET = release
else ifeq ($(word 2,$(MAKECMDGOALS)),debug)
TARGET = debug
endif

# set flag to prevent the printing of directories
ifndef VERBOSE
MAKEFLAGS += --no-print-directory
endif

##############################
# main targets

.PHONY: all
all: $(MAIN_SUBPROJS)
	@echo Superproject \'all\' executed!

.PHONY: $(MAIN_SUBPROJS)
$(MAIN_SUBPROJS): dep_outs # will make sure that any main subprojects are built
	$(foreach PRJ,$(MAIN_SUBPROJS),cd $(THISDIR)/$(PRJ) && make all $(TARGET) ; )

.PHONY: dep_outs
dep_outs: $(DEP_OUTPUTS) # will copy over all result files of all dependencies to the main projects
	$(foreach DIR,$(MAIN_LIB_DESTS),mkdir -p $(DIR) && cp $^ $(DIR))

.PHONY: $(DEP_OUTPUTS)
$(DEP_OUTPUTS): # will make sure that any dependency subprojects are built
	$(foreach PRJ,$(DEP_SUBPROJS),cd $(THISDIR)/$(PRJ) && make all $(TARGET) ; )

##############################
# more targets

.PHONY: run runall
run: $(word $(if $(word 2,$(MAKECMDGOALS)),$(word 2,$(MAKECMDGOALS)),1), $(MAIN_SUBPROJS)) # will run the first project in the main list
	@echo ""
	cd $(THISDIR)/$< && make run $(TARGET)

runall: dep_outs # will run all projects in the main list
	$(foreach PRJ,$^,cd $(THISDIR)/$(PRJ) && make run $(TARGET) ; )

.PHONY: clean clear
clean: # cleans up the outputs of all subprojects
	$(foreach PRJ,$(ALL_PROJS),cd $(THISDIR)/$(PRJ) && make clean ; )
clear: clean

cleanall: # cleans up the outputs of all subprojects
	$(foreach PRJ,$(ALL_PROJS),cd $(THISDIR)/$(PRJ) && make cleanall ; )
clearall: cleanall

.PHONY: list info
list: # lists all userspecified projects
	@echo The following Projects are being used:
	@$(foreach PRJ,$(ALL_PROJS:/Makefile=),cd $(THISDIR)/$(PRJ) && make info ; )
info: list

.PHONY: fetch
fetch: ~/Templates/MakefileGenericCppSuperproj # fetches the most recent version of this Makefile from ~/Templates (creates it if it doesn't exist)
	@mv ./Makefile ./Makefile_old
	@cp ~/Templates/MakefileGenericCppSuperproj ./Makefile
	@echo Up-to-date Makefile template fetched!
~/Templates/MakefileGenericCppSuperproj:
	@cp ./Makefile ~/Templates/MakefileGenericCppSuperproj
	@echo Makefile template did not exist, so it has been created!

##############################
# compatibility targets (you shouldn't necessarely use these, but I mean, you certainly can)

.PHONY: debug release outdir libdir
release:
debug:
outdir:
	@echo $(foreach PRJ,$(ALL_PROJS),$(shell cd $(PRJ) && make -s outdir $(TARGET)) )# output files of all dependency projects
libdir:
	@echo $(foreach PRJ,$(ALL_PROJS),$(shell cd $(PRJ) && make -s libdir))# destinations of copied lib files
